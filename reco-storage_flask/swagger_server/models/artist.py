# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Artist(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name: str=None, score: float=None):
        """
        Artist - a model defined in Swagger

        :param name: The name of this Artist.
        :type name: str
        :param score: The score of this Artist.
        :type score: float
        """
        self.swagger_types = {
            'name': str,
            'score': float
        }

        self.attribute_map = {
            'name': 'name',
            'score': 'score'
        }

        self._name = name
        self._score = score

    @classmethod
    def from_dict(cls, dikt) -> 'Artist':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The artist of this Artist.
        :rtype: Artist
        """
        return deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """
        Gets the name of this Artist.

        :return: The name of this Artist.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this Artist.

        :param name: The name of this Artist.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def score(self) -> float:
        """
        Gets the score of this Artist.

        :return: The score of this Artist.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score: float):
        """
        Sets the score of this Artist.

        :param score: The score of this Artist.
        :type score: float
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score

